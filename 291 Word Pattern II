import java.util.*;
public class Solution {
    public boolean wordPatternMatch(String pattern, String str) {
        Set<String> set = new HashSet<String>();
        int[] count = new int[26];
        for (int i=0; i<pattern.length(); i++) {
            count[pattern.charAt(i)-'a']++;
        }
        String[] map = new String[26];
        boolean result = DFS(pattern, 0, str, 0, map, set, count, 0);
        return result;
    }
    public boolean DFS(String pattern, int index1, String str, int index2, String[] map, Set<String> set,
        int[] count, int weight) {
        if (index1 == pattern.length() && index2 == str.length()) {
            return true;
        } else if (index1 == pattern.length() || index2 == str.length()) {
            return false;
        }
        if (map[pattern.charAt(index1)-'a'] != null && map[pattern.charAt(index1)-'a'].length() != 0) {
            String substr = map[pattern.charAt(index1)-'a'];
            if (index2+substr.length() > str.length()) {
                return false;
            }
            if (!str.substring(index2, index2+substr.length()).equals(substr)) {
                return false;
            } else {
                boolean result = DFS(pattern, index1+1, str, index2+substr.length(), map, set, count, weight);
                return result;
            }
        }
        for (int i=index2+1; i<=str.length(); i++) {
            if (set.contains(str.substring(index2, i))) {
                continue;
            }
            if (weight + count[pattern.charAt(index1)-'a'] * (i-index2) > str.length()) {
                break;
            }
            map[pattern.charAt(index1)-'a'] = str.substring(index2, i);
            set.add(str.substring(index2, i));
            boolean result = DFS(pattern, index1+1, str, i, map, set, 
                count, weight + count[pattern.charAt(index1)-'a'] * (i-index2));
            if (result) {
                return true;
            }
            map[pattern.charAt(index1)-'a'] = "";
            set.remove(str.substring(index2, i));
        }
        return false;
    }
}
