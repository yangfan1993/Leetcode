public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> result = new ArrayList<String>();
        if (s.length() > 12 || s.length() < 4) {
            return result;
        }
        DFS(s, 0, new StringBuilder(), result, 0);
        return result;
    }
    public void DFS(String s, int index, StringBuilder current, List<String> result, int depth){
        if (index == s.length() && depth == 4) {
            String temp = current.toString();
            result.add(temp.substring(0, temp.length()-1));
        } else if (index == s.length()) {
            return;
        } else if (s.length()-index > 3 * (4-depth)) {
            return;
        }
        for (int i=1; i<=3; i++) {
            if (index + i > s.length()) {
                break;
            }
            if (i == 2 && Integer.valueOf(s.substring(index, index+2)) < 10) {
                continue;
            }
            if (i == 3 && (Integer.valueOf(s.substring(index, index+3)) < 100 
                || Integer.valueOf(s.substring(index, index+3)) > 255)) {
                continue;
            }
            current.append(s.substring(index, index+i));
            current.append(".");
            DFS(s, index+i, current, result, depth+1);
            current.setLength(current.length()-1-i);
        }
        return;
    }
}
