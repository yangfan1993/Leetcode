import java.util.*;
public class Solution {
    public List<String> removeInvalidParentheses(String s) {
        int left = 0;
        int right = 0;
        for (int i=0; i<s.length(); i++) {
            if (s.charAt(i) == '(') {
                left ++;
            } else if (s.charAt(i) == ')' && right < left) {
                right ++;
            }
        }
        int pair = Math.min(left, right);
        Set<String> result = new HashSet<String>();
        DFS(result, s, new StringBuilder(), pair, pair, 0);
        return new ArrayList<String>(result);
    }
    public void DFS(Set<String> result, String s, StringBuilder current, int left, int right, int index) {
        if (left < 0 || right < 0 || left > right) {
            return;
        } 
        if (left == 0 && right == 0 && index == s.length()) {
            result.add(current.toString());
            return;
        }
        if (index == s.length()) {
            return;
        }
        if (s.charAt(index) == '(' || s.charAt(index) == ')') {
            if (s.charAt(index) == '(') {
                current.append('(');
                DFS(result, s, current, left-1, right, index+1);
                current.setLength(current.length()-1);
                DFS(result, s, current, left, right, index+1);
            } else if (s.charAt(index) == ')') {
                current.append(')');
                DFS(result, s, current, left, right-1, index+1);
                current.setLength(current.length()-1);
                DFS(result, s, current, left, right, index+1);
            }
        } else {
            current.append(s.charAt(index));
            DFS(result, s, current, left, right, index+1);
            current.setLength(current.length()-1);
        }
        return;
    }
}
