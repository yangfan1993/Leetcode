public class Solution {
    public int countRangeSum(int[] nums, int lower, int upper) {
        if (nums.length == 0) {
            return 0;
        }
        int count = count(nums, lower, upper, 0, nums.length-1);
        return count;
    }
    public int count(int[] nums, int lower, int upper, int start, int end) {
        if (start == end) {
            if (nums[start] >= lower && nums[end] <= upper) {
                return 1;
            } else {
                return 0;
            }
        } else {
            int mid = start + (end - start)/2;
            int count1 = count(nums, lower, upper, start, mid);
            int count2 = count(nums, lower, upper, mid+1, end);
            int[] sum1 = new int[mid-start+1];
            sum1[0] = nums[mid];
            int[] sum2 = new int[end-mid];
            sum2[0] = nums[mid+1];
            for (int i=1; i<end-mid; i++) {
                sum2[i] = sum2[i-1] + nums[i+mid+1];
            }
            for (int i=1; i<mid-start+1; i++) {
                sum1[i] = sum1[i-1] + nums[mid-i];
            }
            Arrays.sort(sum1);
            Arrays.sort(sum2);
            int count3 = 0;
            int index1 = sum1.length-1;
            int index2 = sum1.length-1;
            for (int i=0; i<sum2.length; i++) {
                while (index1 >= 0 && sum2[i] + sum1[index1] > upper) {
                    index1 --;
                }
                index2 = Math.min(index2, index1);
                while (index2 >= 0 && sum2[i] + sum1[index2] >= lower) {
                    index2 --;
                }
                count3 += index1 - index2;
            }
            return count1 + count2 + count3;
        }
    }
}
